package com.baidu.mapframework.nirvana.annotation.p204a;

import com.baidu.mapframework.nirvana.annotation.AppendPhoneInfo;
import com.baidu.mapframework.nirvana.annotation.CookieStore;
import com.baidu.mapframework.nirvana.annotation.DELETE;
import com.baidu.mapframework.nirvana.annotation.GET;
import com.baidu.mapframework.nirvana.annotation.GetMap;
import com.baidu.mapframework.nirvana.annotation.GetParam;
import com.baidu.mapframework.nirvana.annotation.Header;
import com.baidu.mapframework.nirvana.annotation.HeaderMap;
import com.baidu.mapframework.nirvana.annotation.InputStream;
import com.baidu.mapframework.nirvana.annotation.POST;
import com.baidu.mapframework.nirvana.annotation.PUT;
import com.baidu.mapframework.nirvana.annotation.PostMap;
import com.baidu.mapframework.nirvana.annotation.PostParam;
import com.baidu.mapframework.nirvana.annotation.RegisterRequest;
import com.baidu.mapframework.nirvana.annotation.RequestBody;
import com.baidu.mapframework.nirvana.annotation.SignToken;
import com.baidu.mapframework.nirvana.annotation.SignToken.SignTokenType;
import com.baidu.mapframework.nirvana.annotation.Sync;
import com.baidu.mapframework.nirvana.annotation.Url;
import com.baidu.mapframework.nirvana.annotation.UrlEncode;
import com.baidu.mapframework.nirvana.annotation.UrlEncode.UrlEncodeType;
import com.p015a.p016a.C0357l;
import com.p015a.p016a.C0359c;
import com.p015a.p016a.C0366f;
import com.p015a.p016a.C0370g;
import com.p015a.p016a.C0373h;
import com.p015a.p016a.C0373h.C0372a;
import com.p015a.p016a.C0384m;
import com.p015a.p016a.C0384m.C0382a;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.lang.model.element.AnnotationMirror;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.element.VariableElement;

/* compiled from: NirvanaHttpAnnotationParser */
/* renamed from: com.baidu.mapframework.nirvana.annotation.a.g */
class C3524g extends C3517a {
    /* renamed from: c */
    private Element f19093c;
    /* renamed from: d */
    private C0359c f19094d = C0359c.c(C3519c.f19077d);
    /* renamed from: e */
    private C0359c f19095e = C0359c.c(C3519c.f19075b);

    public C3524g(Element element, Messager messager, Filer filer) {
        super(messager, filer);
        this.f19093c = element;
    }

    /* renamed from: a */
    public void m15117a() {
        if (this.f19093c.getKind() != ElementKind.INTERFACE) {
            m15102a(this.f19093c, "Only interface can be annotated with @%s", RegisterRequest.class.getSimpleName());
        }
        if (!m15116b(this.f19093c)) {
            m15102a(this.f19093c, "%s should be annotated by @Keep", this.f19093c.getSimpleName());
        }
        String originalClassName = this.f19093c.asType().toString();
        C0357l typeName = C0359c.c(originalClassName);
        String originalSimpleClassName = this.f19093c.getSimpleName().toString();
        String packageName = originalClassName.replace("." + originalSimpleClassName, ".generate");
        String className = originalSimpleClassName + "Impl";
        C0382a classBuilder = C0384m.a(className).a(new Modifier[]{Modifier.PUBLIC, Modifier.FINAL}).a(this.f19094d).a("This file is automatically generated. \nDO NOT MODIFY!\n", new Object[0]).b(typeName);
        m15106a(classBuilder);
        m15107a(classBuilder, typeName, className);
        for (Element method : ((TypeElement) this.f19093c).getEnclosedElements()) {
            if (method.getKind() == ElementKind.METHOD) {
                GET getMethodAnnotation = (GET) method.getAnnotation(GET.class);
                POST postMethodAnnotation = (POST) method.getAnnotation(POST.class);
                PUT putRequestMethodAnnotation = (PUT) method.getAnnotation(PUT.class);
                DELETE deleteMethodAnnotation = (DELETE) method.getAnnotation(DELETE.class);
                m15110a(method);
                SignToken signTokenAnnotation = (SignToken) method.getAnnotation(SignToken.class);
                UrlEncode urlEncodeAnnotation = (UrlEncode) method.getAnnotation(UrlEncode.class);
                boolean needAppendPhoneInfo = ((AppendPhoneInfo) method.getAnnotation(AppendPhoneInfo.class)) != null;
                SignTokenType signTokenType = SignTokenType.NONE;
                UrlEncodeType urlEncodeType = UrlEncodeType.NONE;
                if (urlEncodeAnnotation != null) {
                    urlEncodeType = urlEncodeAnnotation.value();
                }
                if (signTokenAnnotation != null) {
                    signTokenType = signTokenAnnotation.value();
                }
                if (urlEncodeAnnotation != null) {
                    urlEncodeType = urlEncodeAnnotation.value();
                }
                if (postMethodAnnotation != null) {
                    m15114b(classBuilder, method, needAppendPhoneInfo, urlEncodeType, signTokenType);
                } else if (getMethodAnnotation != null) {
                    m15109a(classBuilder, method, needAppendPhoneInfo, urlEncodeType, signTokenType);
                } else if (putRequestMethodAnnotation != null) {
                    m15108a(classBuilder, method);
                } else if (deleteMethodAnnotation != null) {
                    m15113b(classBuilder, method);
                } else {
                    m15102a(method, "@%s should be annotated", method.getSimpleName());
                }
            }
        }
        try {
            C0370g.a(packageName, classBuilder.a()).a().a(this.b);
        } catch (IOException e) {
            m15102a(this.f19093c, e.getMessage(), new Object[0]);
        }
    }

    /* renamed from: a */
    private void m15106a(C0382a classBuilder) {
        String str;
        C0357l retrofit = this.f19095e;
        classBuilder.a(C0366f.a(retrofit, "mRetrofit", new Modifier[0]).a(new Modifier[]{Modifier.PRIVATE}).a());
        RegisterRequest registerRequest = (RegisterRequest) this.f19093c.getAnnotation(RegisterRequest.class);
        C0372a a = C0373h.b().a(new Modifier[]{Modifier.PRIVATE});
        String str2 = "mRetrofit = new $T()$L$L";
        Object[] objArr = new Object[3];
        objArr[0] = retrofit;
        objArr[1] = registerRequest.timeOut() == 10000 ? "" : ".setTimeout(" + registerRequest.timeOut() + ")";
        if (registerRequest.cookiePolicy() == null || registerRequest.cookiePolicy().isEmpty()) {
            str = "";
        } else {
            str = ".setCookiePolicy(\"" + registerRequest.cookiePolicy() + "\")";
        }
        objArr[2] = str;
        classBuilder.a(a.g(str2, objArr).c());
    }

    /* renamed from: a */
    private void m15107a(C0382a classBuilder, C0357l interfaces, String className) {
        classBuilder.a(C0384m.a("HOLDER").a(new Modifier[]{Modifier.PRIVATE, Modifier.STATIC, Modifier.FINAL}).a(C0366f.a(interfaces, "INSTANCE", new Modifier[0]).a(new Modifier[]{Modifier.STATIC, Modifier.FINAL}).b("new " + className + "()", new Object[0]).a()).a());
        classBuilder.a(C0373h.a("getInstance").a(new Modifier[]{Modifier.PUBLIC, Modifier.STATIC}).a(interfaces).g("return HOLDER.INSTANCE", new Object[0]).c());
    }

    /* renamed from: a */
    private void m15109a(C0382a classBuilder, Element method, boolean appendPhoneInfo, UrlEncodeType urlEncodeType, SignTokenType signTokenType) {
        C0372a methodBuilder = C0373h.a(method.getSimpleName().toString()).a(new Modifier[]{Modifier.PUBLIC}).a(Void.TYPE);
        methodBuilder.a("$L\n", new Object[]{method.getSimpleName()});
        ExecutableElement executableElement = (ExecutableElement) method;
        List<? extends VariableElement> parameterElement = executableElement.getParameters();
        String callbackName = null;
        String syncParamName = null;
        String urlParamName = null;
        C0359c urlEncodeUtils = C0359c.c(C3519c.f19078e);
        C0359c urlEncodeTypeClass = C0359c.c(C3519c.f19079f);
        C0359c signTokenTypeClass = C0359c.c(C3519c.f19080g);
        C3523f headerProcessor = new C3523f(this);
        C3522e getParamProcessor = new C3522e(this);
        C3521d c3521d = new C3521d(this);
        Iterator it = parameterElement.iterator();
        while (it.hasNext()) {
            Element variableElement = (VariableElement) it.next();
            methodBuilder.a("@param $L\n", new Object[]{variableElement.getSimpleName().toString()});
            methodBuilder.a(C0359c.a(variableElement.asType()), variableElement.getSimpleName().toString(), new Modifier[0]);
            m15112a(C3519c.f19081h, executableElement, (VariableElement) variableElement);
            m15111a(executableElement, variableElement);
            GetMap getMapAnno = (GetMap) variableElement.getAnnotation(GetMap.class);
            GetParam getParamAnno = (GetParam) variableElement.getAnnotation(GetParam.class);
            Url urlAnno = (Url) variableElement.getAnnotation(Url.class);
            Header headerAnno = (Header) variableElement.getAnnotation(Header.class);
            HeaderMap headerMapAnno = (HeaderMap) variableElement.getAnnotation(HeaderMap.class);
            CookieStore cookieStoreAnno = (CookieStore) variableElement.getAnnotation(CookieStore.class);
            if (((Sync) variableElement.getAnnotation(Sync.class)) != null) {
                if (!(variableElement.asType().toString().equals("boolean") && syncParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be boolean", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                syncParamName = variableElement.getSimpleName().toString();
            } else if (urlAnno != null) {
                if (!(variableElement.asType().toString().equals(String.class.getCanonicalName()) && urlParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be String", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                urlParamName = variableElement.getSimpleName().toString();
            } else if (headerAnno != null || headerMapAnno != null) {
                headerProcessor.m15105a(methodBuilder, headerAnno, headerMapAnno, executableElement, variableElement);
            } else if (getParamAnno != null || getMapAnno != null) {
                getParamProcessor.m15104a(methodBuilder, getParamAnno, getMapAnno, urlEncodeType, signTokenType, executableElement, variableElement);
            } else if (cookieStoreAnno != null) {
                if (!variableElement.asType().toString().equals("org.apache.http.client.CookieStore")) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be org.apache.http.client.CookieStore", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                c3521d.m15103a(methodBuilder, cookieStoreAnno, executableElement, variableElement);
            } else if (!C0359c.a(variableElement.asType()).h()) {
                if (!m15115b(variableElement.asType().toString())) {
                    m15102a(variableElement, "%s parameter type is not support _____ %s", variableElement.getSimpleName(), variableElement.asType().toString());
                }
                if (callbackName == null) {
                    callbackName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(variableElement, "you can have only one CallBack int the @%s method", method.getSimpleName());
                }
            }
        }
        if (urlParamName == null) {
            m15102a(executableElement, "@Url not find, please annotation url with @Url", new Object[0]);
        }
        if (appendPhoneInfo) {
            if (!getParamProcessor.f19087a) {
                getParamProcessor.f19087a = true;
                methodBuilder.g("$T<$T, $T> $L = new $T<>()", new Object[]{HashMap.class, String.class, String.class, "_urlParams", HashMap.class});
            }
            C0359c sysOSApi = C0359c.c(C3519c.f19076c);
            methodBuilder.g("android.os.Bundle $L = $T.getInstance().getNativePhoneInfoBundle(false)", new Object[]{"phoneInfoBundle", sysOSApi});
            methodBuilder.g("$T<$T> $L = $L.keySet()", new Object[]{Set.class, String.class, "phoneInfoKeys", "phoneInfoBundle"});
            methodBuilder.d("for($T $L : $L)", new Object[]{String.class, "_phoneInfoKey", "phoneInfoKeys"});
            methodBuilder.g("$L.put(_phoneInfoKey, $T.valueOf(phoneInfoBundle.get(_phoneInfoKey)))", new Object[]{"_urlParams", String.class});
            methodBuilder.b();
        }
        if (getParamProcessor.f19087a) {
            methodBuilder.d("if($L != null)", new Object[]{"_urlParams"});
            methodBuilder.g("StringBuilder $L = new StringBuilder($L)", new Object[]{"_urlBuilder", urlParamName});
            methodBuilder.d("if(!$L.contains($S))", new Object[]{urlParamName, "?"});
            methodBuilder.g("_urlBuilder.append($S)", new Object[]{"?"});
            methodBuilder.e("else", new Object[0]);
            methodBuilder.g("$T query = android.net.Uri.parse($L).getQuery()", new Object[]{String.class, urlParamName});
            methodBuilder.d("if(!android.text.TextUtils.isEmpty($L))", new Object[]{"query"});
            methodBuilder.g("_urlBuilder.append(\"&\")", new Object[0]);
            methodBuilder.b();
            methodBuilder.b();
            if (signTokenType.equals(SignTokenType.MAP_PHPUI)) {
                methodBuilder.g("_urlBuilder.append($T.getUrlQueryString(_urlParams, $T.ENGINE))", new Object[]{urlEncodeUtils, urlEncodeTypeClass});
            } else {
                methodBuilder.g("_urlBuilder.append($T.getUrlQueryString(_urlParams, $T.JAVA))", new Object[]{urlEncodeUtils, urlEncodeTypeClass});
            }
            methodBuilder.g("$L = _urlBuilder.toString()", new Object[]{urlParamName});
            methodBuilder.b();
        }
        if (signTokenType != null) {
            if (!signTokenType.equals(SignTokenType.NONE)) {
                methodBuilder.d("if(!android.text.TextUtils.isEmpty($L))", new Object[]{urlParamName});
                methodBuilder.g("$T<$T, $T> $L = new $T<>()", new Object[]{HashMap.class, String.class, String.class, "signParams", HashMap.class});
                if (getParamProcessor.f19087a) {
                    methodBuilder.d("if($L != null)", new Object[]{"_urlParams"});
                    methodBuilder.g("$L.putAll($L)", new Object[]{"signParams", "_urlParams"});
                    methodBuilder.b();
                }
                if (signTokenType.equals(SignTokenType.MAP_UGC)) {
                    String needUrlEncode = "true";
                    if (urlEncodeType != null) {
                        if (urlEncodeType.equals(UrlEncodeType.JAVA)) {
                            needUrlEncode = "false";
                        }
                    }
                    methodBuilder.g("$T signString = com.baidu.components.uploadpic.util.ShenBIanSig.getSig(signParams, " + needUrlEncode + ")", new Object[]{String.class});
                } else {
                    methodBuilder.g("$T signString = $T.signString(signParams, $T.$L)", new Object[]{String.class, urlEncodeUtils, signTokenTypeClass, signTokenType});
                }
                methodBuilder.g("$L.put(\"sign\", signString)", new Object[]{"_urlParams"});
                methodBuilder.b();
            }
        }
        String str = "mRetrofit.build().$L($L$L,$L, $L, $L)";
        Object[] objArr = new Object[6];
        objArr[0] = "getRequest";
        objArr[1] = syncParamName == null ? "false," : syncParamName + ", ";
        objArr[2] = urlParamName;
        objArr[3] = headerProcessor.f19092a ? "_headerParams" : "null";
        objArr[4] = getParamProcessor.f19087a ? "_urlParams" : "null";
        objArr[5] = callbackName;
        methodBuilder.g(str, objArr);
        classBuilder.a(methodBuilder.c());
    }

    /* renamed from: b */
    private void m15114b(C0382a classBuilder, Element method, boolean appendPhoneInfo, UrlEncodeType urlEncodeType, SignTokenType signTokenType) {
        C0372a methodBuilder = C0373h.a(method.getSimpleName().toString()).a(new Modifier[]{Modifier.PUBLIC}).a(Void.TYPE);
        ExecutableElement executableElement = (ExecutableElement) method;
        List<? extends VariableElement> paramterElement = executableElement.getParameters();
        String callbackName = null;
        String syncParamName = null;
        String urlParamName = null;
        String httpEntityParamName = null;
        C0359c urlEncodeUtils = C0359c.c(C3519c.f19078e);
        C0359c urlEncodeTypeClass = C0359c.c(C3519c.f19079f);
        C0359c signTokenTypeClass = C0359c.c(C3519c.f19080g);
        C3523f headerProcessor = new C3523f(this);
        C3522e getParamProcessor = new C3522e(this);
        C3525i c3525i = new C3525i(this);
        C3521d c3521d = new C3521d(this);
        for (VariableElement variableElement : paramterElement) {
            methodBuilder.a("@param $L\n", new Object[]{variableElement.getSimpleName().toString()});
            methodBuilder.a(C0359c.a(variableElement.asType()), variableElement.getSimpleName().toString(), new Modifier[0]);
            m15112a(C3519c.f19081h, executableElement, variableElement);
            GetParam getParamAnno = (GetParam) variableElement.getAnnotation(GetParam.class);
            PostParam postParamAnno = (PostParam) variableElement.getAnnotation(PostParam.class);
            GetMap getMapAnno = (GetMap) variableElement.getAnnotation(GetMap.class);
            PostMap postMapAnno = (PostMap) variableElement.getAnnotation(PostMap.class);
            Url urlAnno = (Url) variableElement.getAnnotation(Url.class);
            Header headerAnno = (Header) variableElement.getAnnotation(Header.class);
            RequestBody requestBodyAnno = (RequestBody) variableElement.getAnnotation(RequestBody.class);
            HeaderMap headerMapAnno = (HeaderMap) variableElement.getAnnotation(HeaderMap.class);
            InputStream inputStreamAnno = (InputStream) variableElement.getAnnotation(InputStream.class);
            CookieStore cookieStoreAnno = (CookieStore) variableElement.getAnnotation(CookieStore.class);
            if (((Sync) variableElement.getAnnotation(Sync.class)) != null) {
                if (!(variableElement.asType().toString().equals("boolean") && syncParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be boolean", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                syncParamName = variableElement.getSimpleName().toString();
            } else if (urlAnno != null) {
                if (!(variableElement.asType().toString().equals(String.class.getCanonicalName()) && urlParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be String", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                urlParamName = variableElement.getSimpleName().toString();
            } else if (headerAnno != null || headerMapAnno != null) {
                headerProcessor.m15105a(methodBuilder, headerAnno, headerMapAnno, executableElement, variableElement);
            } else if (getParamAnno != null || getMapAnno != null) {
                if (requestBodyAnno != null) {
                    m15102a(executableElement, "@RequestBody is not Compatible with @GetMap and @GetParam !", new Object[0]);
                }
                getParamProcessor.m15104a(methodBuilder, getParamAnno, getMapAnno, urlEncodeType, signTokenType, executableElement, variableElement);
            } else if (postMapAnno != null || postParamAnno != null || inputStreamAnno != null) {
                if (requestBodyAnno != null) {
                    m15102a(executableElement, "@RequestBody is not Compatible with @PostMap and @PostParam !", new Object[0]);
                }
                c3525i.m15118a(methodBuilder, postParamAnno, postMapAnno, inputStreamAnno, urlEncodeType, signTokenType, executableElement, variableElement);
            } else if (requestBodyAnno != null) {
                c3525i.f19102d = true;
                if (variableElement.asType().toString().equals("org.apache.http.HttpEntity")) {
                    httpEntityParamName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(executableElement, "@RequestBody param's type is not org.apache.http.HttpEntity !", new Object[0]);
                }
            } else if (cookieStoreAnno != null) {
                if (!variableElement.asType().toString().equals("org.apache.http.client.CookieStore")) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be org.apache.http.client.CookieStore", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                c3521d.m15103a(methodBuilder, cookieStoreAnno, executableElement, variableElement);
            } else if (!C0359c.a(variableElement.asType()).h()) {
                if (!m15115b(variableElement.asType().toString())) {
                    m15102a(variableElement, "%s parameter type is not support _____ %s", variableElement.getSimpleName(), variableElement.asType().toString());
                }
                if (callbackName == null) {
                    callbackName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(variableElement, "you can have only one CallBack int the @%s method", method.getSimpleName());
                }
            }
        }
        if (urlParamName == null) {
            m15102a(executableElement, "@Url not find, please annotation url with @Url", new Object[0]);
        }
        if (appendPhoneInfo) {
            if (!getParamProcessor.f19087a) {
                getParamProcessor.f19087a = true;
                methodBuilder.g("$T<$T, $T> $L = new $T<>()", new Object[]{HashMap.class, String.class, String.class, "_urlParams", HashMap.class});
            }
            C0359c sysOSApi = C0359c.c(C3519c.f19076c);
            methodBuilder.g("android.os.Bundle $L = $T.getInstance().getNativePhoneInfoBundle(false)", new Object[]{"phoneInfoBundle", sysOSApi});
            methodBuilder.g("$T<$T> $L = $L.keySet()", new Object[]{Set.class, String.class, "phoneInfoKeys", "phoneInfoBundle"});
            methodBuilder.d("for($T $L : $L)", new Object[]{String.class, "_phoneInfoKey", "phoneInfoKeys"});
            methodBuilder.g("$L.put(_phoneInfoKey, $T.valueOf(phoneInfoBundle.get(_phoneInfoKey)))", new Object[]{"_urlParams", String.class});
            methodBuilder.b();
        }
        if (getParamProcessor.f19087a) {
            methodBuilder.d("if($L != null)", new Object[]{"_urlParams"});
            methodBuilder.g("StringBuilder $L = new StringBuilder($L)", new Object[]{"_urlBuilder", urlParamName});
            methodBuilder.d("if(!$L.contains($S))", new Object[]{urlParamName, "?"});
            methodBuilder.g("_urlBuilder.append($S)", new Object[]{"?"});
            methodBuilder.e("else", new Object[0]);
            methodBuilder.g("$T query = android.net.Uri.parse($L).getQuery()", new Object[]{String.class, urlParamName});
            methodBuilder.d("if(!android.text.TextUtils.isEmpty($L))", new Object[]{"query"});
            methodBuilder.g("_urlBuilder.append(\"&\")", new Object[0]);
            methodBuilder.b();
            methodBuilder.b();
            if (signTokenType.equals(SignTokenType.MAP_PHPUI)) {
                methodBuilder.g("_urlBuilder.append($T.getUrlQueryString(_urlParams, $T.ENGINE))", new Object[]{urlEncodeUtils, urlEncodeTypeClass});
            } else {
                methodBuilder.g("_urlBuilder.append($T.getUrlQueryString(_urlParams, $T.JAVA))", new Object[]{urlEncodeUtils, urlEncodeTypeClass});
            }
            methodBuilder.g("$L = _urlBuilder.toString()", new Object[]{urlParamName});
            methodBuilder.b();
        }
        if (signTokenType != null) {
            if (!signTokenType.equals(SignTokenType.NONE)) {
                methodBuilder.d("if(!android.text.TextUtils.isEmpty($L))", new Object[]{urlParamName});
                methodBuilder.g("$T<$T, $T> $L = new $T<>()", new Object[]{HashMap.class, String.class, String.class, "signParams", HashMap.class});
                if (getParamProcessor.f19087a) {
                    methodBuilder.d("if($L != null)", new Object[]{"_urlParams"});
                    methodBuilder.g("$L.putAll($L)", new Object[]{"signParams", "_urlParams"});
                    methodBuilder.b();
                }
                if (!c3525i.f19099a) {
                    c3525i.f19099a = true;
                    methodBuilder.g("$T<$T, $T> $L = new $T<>()", new Object[]{HashMap.class, String.class, String.class, "_postParams", HashMap.class});
                }
                if (c3525i.f19099a) {
                    methodBuilder.d("if($L != null)", new Object[]{"_postParams"});
                    methodBuilder.g("$L.putAll($L)", new Object[]{"signParams", "_postParams"});
                    methodBuilder.b();
                }
                if (signTokenType.equals(SignTokenType.MAP_UGC)) {
                    String needUrlEncode = "true";
                    if (urlEncodeType != null) {
                        if (urlEncodeType.equals(UrlEncodeType.JAVA)) {
                            needUrlEncode = "false";
                        }
                    }
                    methodBuilder.g("$T signString = com.baidu.components.uploadpic.util.ShenBIanSig.getSig(signParams, " + needUrlEncode + ")", new Object[]{String.class});
                    methodBuilder.g("StringBuilder $L = new StringBuilder($L)", new Object[]{"_urlBuilder", urlParamName});
                    methodBuilder.d("if(!$L.contains($S))", new Object[]{urlParamName, "?"});
                    methodBuilder.g("_urlBuilder.append($S)", new Object[]{"?"});
                    methodBuilder.b();
                    methodBuilder.g("_urlBuilder.append(\"sign=\" + $L)", new Object[]{"signString"});
                    methodBuilder.g("$L = _urlBuilder.toString()", new Object[]{urlParamName});
                } else {
                    methodBuilder.g("$T signString = $T.signString(signParams, $T.$L)", new Object[]{String.class, urlEncodeUtils, signTokenTypeClass, signTokenType});
                    methodBuilder.g("_postParams.put(\"sign\", signString)", new Object[0]);
                }
                methodBuilder.b();
            }
        }
        String str;
        Object[] objArr;
        if (c3525i.f19102d) {
            String str2;
            str = "mRetrofit.build().$L($L$L, $L, $L, $L)";
            objArr = new Object[6];
            objArr[0] = "postRequest";
            if (syncParamName == null) {
                str2 = "false,";
            } else {
                str2 = syncParamName + ", ";
            }
            objArr[1] = str2;
            objArr[2] = urlParamName;
            if (headerProcessor.f19092a) {
                str2 = "_headerParams";
            } else {
                str2 = "null";
            }
            objArr[3] = str2;
            if (!c3525i.f19102d) {
                httpEntityParamName = "null";
            }
            objArr[4] = httpEntityParamName;
            objArr[5] = callbackName;
            methodBuilder.g(str, objArr);
        } else {
            str = "mRetrofit.build().$L($L$L, $L, $L, $L, $L, $L)";
            objArr = new Object[8];
            objArr[0] = "postRequest";
            objArr[1] = syncParamName == null ? "false," : syncParamName + ", ";
            objArr[2] = urlParamName;
            objArr[3] = headerProcessor.f19092a ? "_headerParams" : "null";
            objArr[4] = c3525i.f19099a ? "_postParams" : "null";
            objArr[5] = c3525i.f19100b ? "_fileParams" : "null";
            objArr[6] = c3525i.f19101c ? "_inputStreams" : "null";
            objArr[7] = callbackName;
            methodBuilder.g(str, objArr);
        }
        classBuilder.a(methodBuilder.c());
    }

    /* renamed from: a */
    private void m15108a(C0382a classBuilder, Element method) {
        C0372a methodBuilder = C0373h.a(method.getSimpleName().toString()).a(new Modifier[]{Modifier.PUBLIC}).a(Void.TYPE);
        ExecutableElement executableElement = (ExecutableElement) method;
        List<? extends VariableElement> paramterElement = executableElement.getParameters();
        String callbackName = null;
        String syncParamName = null;
        String urlParamName = null;
        String httpEntityParamName = null;
        C3523f headerProcessor = new C3523f(this);
        C3522e getParamProcessor = new C3522e(this);
        C3525i c3525i = new C3525i(this);
        C3521d c3521d = new C3521d(this);
        for (VariableElement variableElement : paramterElement) {
            methodBuilder.a("@param $L\n", new Object[]{variableElement.getSimpleName().toString()});
            methodBuilder.a(C0359c.a(variableElement.asType()), variableElement.getSimpleName().toString(), new Modifier[0]);
            m15112a(C3519c.f19081h, executableElement, variableElement);
            GetParam getParamAnno = (GetParam) variableElement.getAnnotation(GetParam.class);
            PostParam postParamAnno = (PostParam) variableElement.getAnnotation(PostParam.class);
            GetMap getMapAnno = (GetMap) variableElement.getAnnotation(GetMap.class);
            PostMap postMapAnno = (PostMap) variableElement.getAnnotation(PostMap.class);
            Url urlAnno = (Url) variableElement.getAnnotation(Url.class);
            Header headerAnno = (Header) variableElement.getAnnotation(Header.class);
            RequestBody requestBodyAnno = (RequestBody) variableElement.getAnnotation(RequestBody.class);
            HeaderMap headerMapAnno = (HeaderMap) variableElement.getAnnotation(HeaderMap.class);
            InputStream inputStreamAnno = (InputStream) variableElement.getAnnotation(InputStream.class);
            CookieStore cookieStoreAnno = (CookieStore) variableElement.getAnnotation(CookieStore.class);
            if (((Sync) variableElement.getAnnotation(Sync.class)) != null) {
                if (!(variableElement.asType().toString().equals("boolean") && syncParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be boolean", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                syncParamName = variableElement.getSimpleName().toString();
            } else if (urlAnno != null) {
                if (!(variableElement.asType().toString().equals(String.class.getCanonicalName()) && urlParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be String", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                urlParamName = variableElement.getSimpleName().toString();
            } else if (headerAnno != null || headerMapAnno != null) {
                headerProcessor.m15105a(methodBuilder, headerAnno, headerMapAnno, executableElement, variableElement);
            } else if (getParamAnno != null || getMapAnno != null) {
                getParamProcessor.m15104a(methodBuilder, getParamAnno, getMapAnno, null, null, executableElement, variableElement);
            } else if (postMapAnno != null || postParamAnno != null || inputStreamAnno != null) {
                c3525i.m15118a(methodBuilder, postParamAnno, postMapAnno, inputStreamAnno, null, null, executableElement, variableElement);
            } else if (requestBodyAnno != null) {
                c3525i.f19102d = true;
                if (variableElement.asType().toString().equals("org.apache.http.HttpEntity")) {
                    httpEntityParamName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(executableElement, "@RequestBody param's type is not org.apache.http.HttpEntity !", new Object[0]);
                }
            } else if (cookieStoreAnno != null) {
                if (!variableElement.asType().toString().equals("org.apache.http.client.CookieStore")) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be org.apache.http.client.CookieStore", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                c3521d.m15103a(methodBuilder, cookieStoreAnno, executableElement, variableElement);
            } else if (!C0359c.a(variableElement.asType()).h()) {
                if (!m15115b(variableElement.asType().toString())) {
                    m15102a(variableElement, "%s parameter type is not support _____ %s", variableElement.getSimpleName(), variableElement.asType().toString());
                }
                if (callbackName == null) {
                    callbackName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(variableElement, "you can have only one CallBack int the @%s method", method.getSimpleName());
                }
            }
        }
        if (urlParamName == null) {
            m15102a(executableElement, "@Url not find, please annotation url with @Url", new Object[0]);
        }
        String str;
        Object[] objArr;
        if (c3525i.f19102d) {
            String str2;
            str = "mRetrofit.build().$L($L$L, $L, $L, $L)";
            objArr = new Object[6];
            objArr[0] = "putRequest";
            if (syncParamName == null) {
                str2 = "false,";
            } else {
                str2 = syncParamName + ", ";
            }
            objArr[1] = str2;
            objArr[2] = urlParamName;
            if (headerProcessor.f19092a) {
                str2 = "_headerParams";
            } else {
                str2 = "null";
            }
            objArr[3] = str2;
            if (!c3525i.f19102d) {
                httpEntityParamName = "null";
            }
            objArr[4] = httpEntityParamName;
            objArr[5] = callbackName;
            methodBuilder.g(str, objArr);
        } else {
            str = "mRetrofit.build().$L($L$L, $L, $L, $L, $L, $L)";
            objArr = new Object[8];
            objArr[0] = "putRequest";
            objArr[1] = syncParamName == null ? "false," : syncParamName + ", ";
            objArr[2] = urlParamName;
            objArr[3] = headerProcessor.f19092a ? "_headerParams" : "null";
            objArr[4] = c3525i.f19099a ? "_postParams" : "null";
            objArr[5] = c3525i.f19100b ? "_fileParams" : "null";
            objArr[6] = c3525i.f19101c ? "_inputStreams" : "null";
            objArr[7] = callbackName;
            methodBuilder.g(str, objArr);
        }
        classBuilder.a(methodBuilder.c());
    }

    /* renamed from: b */
    private void m15113b(C0382a classBuilder, Element method) {
        C0372a methodBuilder = C0373h.a(method.getSimpleName().toString()).a(new Modifier[]{Modifier.PUBLIC}).a(Void.TYPE);
        ExecutableElement executableElement = (ExecutableElement) method;
        List<? extends VariableElement> paramterElement = executableElement.getParameters();
        String callbackName = null;
        String syncParamName = null;
        String urlParamName = null;
        C3523f headerProcessor = new C3523f(this);
        for (VariableElement variableElement : paramterElement) {
            methodBuilder.a("@param $L\n", new Object[]{variableElement.getSimpleName().toString()});
            methodBuilder.a(C0359c.a(variableElement.asType()), variableElement.getSimpleName().toString(), new Modifier[0]);
            m15112a(C3519c.f19083j, executableElement, variableElement);
            Url urlAnno = (Url) variableElement.getAnnotation(Url.class);
            Header headerAnno = (Header) variableElement.getAnnotation(Header.class);
            HeaderMap headerMapAnno = (HeaderMap) variableElement.getAnnotation(HeaderMap.class);
            if (((Sync) variableElement.getAnnotation(Sync.class)) != null) {
                if (!(variableElement.asType().toString().equals("boolean") && syncParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be boolean", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                syncParamName = variableElement.getSimpleName().toString();
            } else if (urlAnno != null) {
                if (!(variableElement.asType().toString().equals(String.class.getCanonicalName()) && urlParamName == null)) {
                    m15102a(executableElement, "@%s parameter @%s annotation error, parameter should be String", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
                }
                urlParamName = variableElement.getSimpleName().toString();
            } else if (headerAnno != null || headerMapAnno != null) {
                headerProcessor.m15105a(methodBuilder, headerAnno, headerMapAnno, executableElement, variableElement);
            } else if (!C0359c.a(variableElement.asType()).h()) {
                if (!m15115b(variableElement.asType().toString())) {
                    m15102a(variableElement, "%s parameter type is not support _____ %s", variableElement.getSimpleName(), variableElement.asType().toString());
                }
                if (callbackName == null) {
                    callbackName = variableElement.getSimpleName().toString();
                } else {
                    m15102a(variableElement, "you can have only one CallBack int the @%s method", method.getSimpleName());
                }
            }
        }
        if (urlParamName == null) {
            m15102a(executableElement, "@Url not find, please annotation url with @Url", new Object[0]);
        }
        String str = "mRetrofit.build().$L($L$L, $L, $L, $L)";
        String[] strArr = new Object[6];
        strArr[0] = "deleteRequest";
        strArr[1] = syncParamName == null ? "false," : syncParamName + ", ";
        strArr[2] = urlParamName;
        strArr[3] = headerProcessor.f19092a ? "_headerParams" : "null";
        strArr[4] = "null";
        strArr[5] = callbackName;
        methodBuilder.g(str, strArr);
        classBuilder.a(methodBuilder.c());
    }

    /* renamed from: b */
    private boolean m15115b(String name) {
        for (String className : C3519c.f19074a) {
            if (className.equals(name)) {
                return true;
            }
        }
        return false;
    }

    /* renamed from: a */
    private void m15112a(Class<?>[] types, ExecutableElement executableElement, VariableElement variableElement) {
        if (types == null || types.length == 0) {
            throw new RuntimeException("check class size is empty!");
        }
        int check = 0;
        for (Class annotationClass : types) {
            if (variableElement.getAnnotation(annotationClass) != null) {
                check++;
            }
        }
        if (check > 1) {
            m15102a(executableElement, "@%s method @%s parameter annotation error", executableElement.getSimpleName(), variableElement.getSimpleName().toString());
        }
    }

    /* renamed from: a */
    private void m15110a(Element method) {
        if (method.getKind().equals(ElementKind.METHOD)) {
            int check = 0;
            for (Class annotationClass : C3519c.f19082i) {
                if (method.getAnnotation(annotationClass) != null) {
                    check++;
                }
            }
            if (check > 1) {
                m15102a(method, "@%s method @%s parameter annotation error.", method.getSimpleName(), method.getSimpleName().toString());
            }
        }
    }

    /* renamed from: b */
    private boolean m15116b(Element element) {
        for (AnnotationMirror annotationMirror : element.getAnnotationMirrors()) {
            if (C3519c.f19077d.equals(annotationMirror.getAnnotationType().toString())) {
                return true;
            }
        }
        return false;
    }

    /* renamed from: a */
    private void m15111a(ExecutableElement executableElement, Element variableElement) {
        if (((PostParam) variableElement.getAnnotation(PostParam.class)) != null) {
            m15102a(executableElement, "@PostParam annotation can't be used in @GET Request!", new Object[0]);
        }
        if (((PostMap) variableElement.getAnnotation(PostMap.class)) != null) {
            m15102a(executableElement, "@PostMap annotation can't be used in @GET Request!", new Object[0]);
        }
    }
}
